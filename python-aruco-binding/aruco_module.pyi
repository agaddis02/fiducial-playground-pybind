import numpy
from typing import ClassVar, Iterable, Iterator, List, Tuple, overload

class CvMat:
    def __init__(self, *args, **kwargs) -> None: ...

class Marker:
    id: int
    def __init__(self) -> None: ...
    def draw(self, _in: numpy.ndarray, color) -> None: ...
    def estimatePose(self, cameraMatrix: numpy.ndarray, distCoeffs: numpy.ndarray, markerSize: float) -> Tuple[numpy.ndarray, numpy.ndarray]: ...

class MarkerDetector:
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def detect(cls, img: numpy.ndarray, maxAttemptsPerCandidate: int = ..., dictionary: List[int] = ...) -> List[Marker]: ...

class SpanConstUInt8Dynamic:
    def __init__(self, *args, **kwargs) -> None: ...

class SpanUInt8Dynamic:
    def __init__(self, *args, **kwargs) -> None: ...

class TagDicts:
    APRILTAG_36h11: ClassVar[List[int]] = ...  # read-only
    ARUCO_MIP_36h12: ClassVar[List[int]] = ...  # read-only
    def __init__(self, *args, **kwargs) -> None: ...

class VectorPoint2f:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg0) -> None: ...
    @overload
    def __init__(self, arg0: Iterable) -> None: ...
    def append(self, x) -> None: ...
    def clear(self) -> None: ...
    def count(self, x) -> int: ...
    @overload
    def extend(self, L) -> None: ...
    @overload
    def extend(self, L: Iterable) -> None: ...
    def insert(self, i: int, x) -> None: ...
    def pop(self, *args, **kwargs): ...
    def remove(self, x) -> None: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, x) -> bool: ...
    @overload
    def __delitem__(self, arg0: int) -> None: ...
    @overload
    def __delitem__(self, arg0: slice) -> None: ...
    def __eq__(self, arg0) -> bool: ...
    def __getitem__(self, index): ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __ne__(self, arg0) -> bool: ...
    @overload
    def __setitem__(self, arg0: int, arg1) -> None: ...
    @overload
    def __setitem__(self, arg0: slice, arg1) -> None: ...

def numpy_to_cvMat(arg0: numpy.ndarray[numpy.uint8]) -> numpy.ndarray: ...
